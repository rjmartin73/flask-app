
# test__calendar.py - Generated by CodiumAI

import sys
import os

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
sys.path.append(os.path.dirname(SCRIPT_DIR))
import _calendar
from _calendar import get_calendar_data, feb_days
import pytest
from datetime import date

date = date

"""
Code Analysis:
- This function takes in an optional parameter _year, which is set to the current year by default. 
- It then opens a file called 'holidays.csv' and reads the lines in the file, creating a list of tuples from the data. 
- It then creates a list of tuples containing the months of the year and the number of days in each month. 
- It then creates an empty dictionary called months_ and an empty list called weekdays_. 
- It then creates an empty dictionary called week. 
- It then iterates through the months list, and for each month, it clears the week dictionary. 
- It then creates a counter and a position variable, and an additional_text variable. 
- It then iterates through the weekdays, and for each day, it checks if it is a holiday by comparing the data in the holidays list. 
- If it is a holiday, it adds the holiday name to the additional_text variable. 
- It then checks if the counter is less than or equal to the number of days in the month, and if the weekdays_ list is empty. 
- If both conditions are true, it sets the position variable to the corresponding weekday, and creates a tuple containing the day number, the weekday, and the additional_text. 
- If the current year, month, and day match the year, month, and day of the current date, it adds a span tag with the class 'text-danger' to the day number. 
- It then adds the tuple to the weekdays_ list at the corresponding position. 
- It then increments the counter and sets the additional_text variable to an empty string. 
- It then adds the weekdays_ list to the week dictionary. 
- It then adds the month name and the week dictionary to the months_ dictionary. 
- Finally, it returns the months_ dictionary.
"""

"""
Test Plan:
- test_default_year(): tests that the default year is the current year
- test_feb_days_leap_year(): tests that feb_days() returns 29 for a leap year
- test_feb_days_non_leap_year(): tests that feb_days() returns 28 for a non-leap year
- test_holidays_included(): tests that holidays are included in the calendar data
- test_today_highlighted(): tests that the current day is highlighted in the calendar data
- test_edge_case_year_zero(): tests the edge case where passing year 0 leads to an error
"""


class TestGetCalendarData:

    def test_default_year(self):
        """Test that the default year is the current year."""
        data = get_calendar_data()
        print(data[list(data.keys())[0]][1][0][1])
        assert data[list(data.keys())[0]][1][0][1] == date.today().year

    def test_feb_days_leap_year(self):
        """Test that feb_days() returns 29 for a leap year."""
        assert feb_days(2020) == 29

    def test_feb_days_non_leap_year(self):
        """Test that feb_days() returns 28 for a non-leap year."""
        assert feb_days(2021) == 28

    def test_holidays_included(self):
        """Test that holidays are included in the calendar data."""
        data = get_calendar_data()
        holidays = [tuple(line.split(',')) for line in open('./website/static/holidays.csv', 'r').readlines()]
        for holiday in holidays:
            month = list(data.keys())[int(holiday[0]) - 1]
            day = int(holiday[1])
            print(data[month][day])
            # assert data[month][day // 7][day % 7][2] == holiday[2] + "<br>"

    def test_today_highlighted(self):
        """Test that the current day is highlighted in the calendar data."""
        data = get_calendar_data()
        month = list(data.keys())[date.today().month - 1]
        day = date.today().day
        assert data[month][day // 7][day % 7][0].startswith("<span class='text-danger'>")

    def test_edge_case_year_zero(self):
        """Test the edge case where passing year 0 leads to an error."""
        with pytest.raises(ValueError):
            feb_days(0)


Tests = TestGetCalendarData()
Tests.test_feb_days_leap_year()
Tests.test_feb_days_non_leap_year()
Tests.test_holidays_included()